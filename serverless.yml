service: s3-file-api

# provider:
#   name: aws
#   runtime: nodejs12.x
#   stage: dev
#   region: ap-south-1
#   apiName: ${self:service}
#   memorySize: 128 # mb
#   timeout: 10 # seconds
#   environment:
#     FILE_UPLOAD_BUCKET_NAME: ${self:custom.fileBucketName}
provider:
  name: aws
  runtime: nodejs12.x  # You can update this to a more recent runtime if desired
  stage: dev
  region: ap-south-1
  apiName: ${self:service}
  memorySize: 128 # mb
  timeout: 10 # seconds
  environment:
    FILE_UPLOAD_BUCKET_NAME: ${self:custom.fileBucketName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
        - logs:TagResource
      Resource: '*'


plugins:
  - serverless-iam-roles-per-function

custom:
  # Updated bucket name to adhere to AWS naming conventions
  fileBucketName: s3-file-bucket-new-dev-${self:provider.stage}

functions:
  s3FileUploader:
    handler: src/upload.handler
    name: s3-file-uploader
    description: A lambda handler that uploads a file to an S3 bucket based on an API Gateway trigger.
    events:
      - http:
          path: file
          method: POST
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "s3:Put*"
          - "logs:TagResource" # Add this permission for CloudWatch Logs tagging
        Resource:
          - arn:aws:s3:::${self:custom.fileBucketName}/*
          - arn:aws:logs:*:*:* # This allows tagging CloudWatch Logs resources

  s3FileGet:
    handler: src/get.handler
    name: s3-file-get
    description: A lambda handler that retrieves a file from an S3 bucket based on an API Gateway trigger.
    events:
      - http:
          path: file/{fileKey}
          method: GET
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "s3:Get*"
          - "logs:TagResource" # Add this permission for CloudWatch Logs tagging
        Resource:
          - arn:aws:s3:::${self:custom.fileBucketName}/*
          - arn:aws:logs:*:*:* # This allows tagging CloudWatch Logs resources

  s3FileDelete:
    handler: src/delete.handler
    name: s3-file-delete
    description: A lambda handler that deletes a file from an S3 bucket based on an API Gateway trigger.
    events:
      - http:
          path: file/{fileKey}
          method: DELETE
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "s3:DeleteObject"
          - "logs:TagResource" # Add this permission for CloudWatch Logs tagging
        Resource:
          - arn:aws:s3:::${self:custom.fileBucketName}/*
          - arn:aws:logs:*:*:* # This allows tagging CloudWatch Logs resources

resources:
  Resources:
    FileBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.fileBucketName}
        AccessControl: Private
